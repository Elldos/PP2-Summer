def maxfrom3(l):
    return max(l)
nums = input().split()
for i in range(len(nums)):
    nums[i] = int(nums[i])
print(maxfrom3(nums))




  
def isPerfect(n):
    div = []
    for i in range(1, n):
        if n % i == 0:
            div.append(i)
    if n == sum(div):
        return 'The input number is perfect number'
    else:
        return 'The input number is not perfect number'
n = int(input())
print(isPerfect(n))





def hyphen_sep(s):
    x = sorted(s)
    print(*x, sep = '-')
hyphen_sep(input().split('-'))



def square():
    for i in range(1, 31):
        print(i * i, end = ' ')
square()


def reverse(s):
    return s[::-1]
s = input()
print(reverse(s))



def check(n, a, b):
    if a <= n <= b:
        return 'The input number is in range'
    else:
        return 'The input number is not in range'
n, a, b = int(input('Input number: ')), int(input('Start of range: ')), int(input('End of range: '))
print(check(n, a, b))



def unique_list(l):
    unique = []
    for i in l:
        if i not in unique:
            unique.append(i)
        else:
            continue
    return unique
l = input().split()
print(unique_list(l))



  
def test(a):
        def add(b):
                nonlocal a
                a += 1
                return a+b
        return add
func= test(4)
print(func(4))




 
  
def test():
    x = 1
    y = 2
    str1= "test"
    print("hello")
print(test.__code__.co_nlocals)



def isPrime(n):
    cnt = 0
    for i in range(2, n + 1):
        if n % i == 0:
            cnt += 1
    if cnt == 1:
        return 'The input number is prime'
    else:
        return 'The input number is not prime'
n = int(input())
if n < 2:
    print('Please choose positive number, that is higher than 2.')
else:
    print(isPrime(n))
    
    
    
    
    from time import sleep
import math
def delay(fn, ms, *args):
  sleep(ms / 1000)
  return fn(*args)
print("Square root after specific miliseconds:") 
print(delay(lambda x: math.sqrt(x), 100, 16))
print(delay(lambda x: math.sqrt(x), 1000, 100))
print(delay(lambda x: math.sqrt(x), 2000, 25100))
